We need to implement a functionality that behaves like lsmod in order
to see the modules that have been loaded into the kernel.
    
NOTE:   lsmod gets its information by reading the file /proc/modules

When the kernel needs a feature that is not resident in the kernel, the 
kernel module daemon kmod[1] execs modprobe to load the module in. 
modprobe is passed a string in one of two forms:
    1. A module name like softdog or ppp
    2. A more generic identifier like char−major−10−30

If modprobe is handed a generic identifier, it first looks for that string 
in the file /etc/modprobe.conf.[2] If it finds an alias line like:
        alias char−major−10−30 softdog
it knows that the generic identifier refers to the module softdog.ko

Next, modprobe looks through the file /lib/modules/version/modules.dep, 
to see if other modules must be loaded before the requested module may 
be loaded. This file is created by depmod −a and contains module dependencies.

Lastly, modprobe uses insmod to first load any prerequisite modules into the kernel, 
and then the requested module. modprobe directs insmod to /lib/modules/version/

So for example, if you wanted to load the msdos module, you'd have to either run:
    insmod /lib/modules/2.6.11/kernel/fs/fat/fat.ko
    insmod /lib/modules/2.6.11/kernel/fs/msdos/msdos.ko
OR:
    modprobe msdos

What we've seen here is: insmod requires you to pass it the full pathname and to insert 
the modules in the right order, while modprobe just takes the name, without any extension,
and figures out all it needs to know by parsing /lib/modules/version/modules.dep

Linux distros provide modprobe, insmod and depmod as a package called module−init−tools.

Kernel modules must have at least two functions: a "start" (initialization) function called 
init_module() which is called when the module is insmoded into the kernel, and an "end" (cleanup) 
function called cleanup_module() which is called just before it is rmmoded.

Typically, init_module() either registers a handler for something with the kernel, or it replaces one of the
kernel functions with its own code (usually code to do something and then call the original function). The
cleanup_module() function is supposed to undo whatever init_module() did, so the module can be
unloaded safely.

printk() was not meant to communicate information to the user, even though we used it for exactly this purpose 
in hello−1! It happens to be a logging mechanism for the kernel, and is used to log information or give warnings 
you can view them (and their meanings) in linux/kernel.h. If you don't specify a priority level, the default 
priority, DEFAULT_MESSAGE_LOGLEVEL, will be used. In practise, don't use number, like <4>. Always use the macro, like KERN_WARNING.